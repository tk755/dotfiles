#!/usr/bin/env bash

set -euo pipefail

# config
REPO_DIR="$HOME/repos"

# patterns to exclude during cloning (via substring matches)
GITHUB_EXCLUDES=(
    "dotfiles"
)

# default flags
CLONE=false
INCLUDE_SKIPPED=false
SHOW_SKIPPED=false

print_help() {
    cat <<EOF
Usage: sync-repos [OPTIONS]

Options:
    --clone             Clone missing repositories from GitHub
    --show-skipped      Show which repositories were skipped (used with --clone)
    --include-skipped   Clone archived and excluded repositories (used with --clone)
    --help              Show this help message

Exclude patterns: 
    ${GITHUB_EXCLUDES[*]}

Description:
    Fetches and pulls all git repositories in $REPO_DIR.
    
    Use --clone to clone all missing repositories from GitHub. 
    Archived repositories or those matching any exclude pattern are skipped by default. 
    Use --show-skipped to display skipped repositories, or --include-skipped to clone them anyway.
    
    This script makes no destructive changes to repositories, either locally or remotely.
EOF
}

is_excluded() {
    local repo="$1"
    for pattern in "${GITHUB_EXCLUDES[@]}"; do
        case "$repo" in
            *"$pattern"*) return 0 ;;
        esac
    done
    return 1
}

print_status() {
    local repo="$1"
    local message="$2"
    local emoji="$3"

    local color="" style="" reset="\e[0m"
    case "$emoji" in
        "✓" )  color="\e[32m" ;;  # green
        "×" )  color="\e[31m" ;;  # red
        "↓" )  color="\e[36m" ;;  # cyan
        "+" )  color="\e[33m" ;;  # yellow
        " " )  style="\e[2m"  ;;  # dim
        * )    ;;
    esac

    printf " %b%s%b %b%-${REPO_COL_WIDTH}s %s%b\n" \
        "$color" "$emoji" "$reset" "$style" "$repo" "$message" "$reset"
}


pull_repo() {
    local repo="$1"
    cd "$repo"

    # ensure we are on a branch with an upstream
    local branch
    if ! branch=$(git symbolic-ref --quiet --short HEAD 2>/dev/null); then
        print_status "$repo" "No branch" "×"
        cd "$REPO_DIR"
        return
    fi

    # ensure we have an upstream branch
    if ! git rev-parse --abbrev-ref "@{u}" > /dev/null 2>&1; then
        print_status "$repo" "No upstream" "×"
        cd "$REPO_DIR"
        return
    fi

    # fetch updates from remote
    if ! git fetch --quiet 2>/dev/null; then
        print_status "$repo" "Remote not found" "×"
        cd "$REPO_DIR"
        return
    fi

    local LOCAL REMOTE BASE
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse "@{u}")
    BASE=$(git merge-base @ "@{u}" 2>/dev/null || true)

    if [ -z "$BASE" ]; then
        print_status "$repo" "Unrelated history" "×"
    elif [ "$LOCAL" = "$REMOTE" ]; then
        print_status "$repo" "Up-to-date" "✓"
    elif [ "$LOCAL" = "$BASE" ]; then
        if git pull --ff-only --quiet; then
            print_status "$repo" "Pulled" "↓"
        else
            print_status "$repo" "Local changes" "×"
        fi
    else
        print_status "$repo" "Diverged" "×"
    fi

    cd "$REPO_DIR"
}

clone_repo() {
    local repo="$1"
    local skip_reason="$2"
    if true || gh repo clone "$GITHUB_USER/$repo" "$repo" > /dev/null 2>&1; then
        if [ -n "$skip_reason" ]; then
            print_status "$repo" "Cloned ($skip_reason)" "+"
        else
            print_status "$repo" "Cloned" "+"
        fi
    else
        print_status "$repo" "Clone failed" "×"
        return
    fi
}

skip_message() {
    local repo="$1"
    local skip_reason="$2"
    if [ "$SHOW_SKIPPED" = true ]; then
        print_status "$repo" "Skipped ($skip_reason)" " "
    fi
}


# parse args
for arg in "$@"; do
    case "$arg" in
        --clone)            CLONE=true ;;
        --show-skipped)     SHOW_SKIPPED=true ;;
        --include-skipped)  INCLUDE_SKIPPED=true ;;
        --help)             print_help ; exit 0 ;;
        *) echo "Unknown argument: $arg" && exit 1 ;;
    esac
done

# check auth and resolve GitHub user
if [ "$CLONE" = true ]; then
    if ! gh auth status > /dev/null 2>&1; then
        echo "You must run 'gh auth login' first."
        exit 1
    fi

    GITHUB_USER=$(gh api user --jq .login 2>/dev/null)
    if [ -z "$GITHUB_USER" ]; then
        echo "Failed to determine GitHub user."
        exit 1
    fi
fi

mkdir -p "$REPO_DIR"
cd "$REPO_DIR"

# gather local repos in the format: repo_name\t[skip_reason]\n
local_repo_data=""
for dir in "$REPO_DIR"/*; do
    [ -d "$dir/.git" ] || continue
    local_repo_data+=$(basename "$dir")$'\t'$'\n'
done

# gather GitHub repos in the format: repo_name\t[skip_reason]\n
github_repo_data=""
if [ "$CLONE" = true ]; then
    # fetch all public and private repositories for the user from GitHub
    github_raw=$(gh repo list "$GITHUB_USER" --limit 1000 --json name,isArchived \
        --jq '.[] | [.name, (.isArchived | tostring | ascii_downcase)] | @tsv')

    # convert into the correct format
    while IFS=$'\t' read -r repo is_archived; do
        skip_reason=""
        if is_excluded "$repo"; then
            skip_reason="excluded"
        elif [ "$is_archived" = "true" ]; then
            skip_reason="archived"
        fi
        github_repo_data+="${repo}"$'\t'"${skip_reason}"$'\n'
    done <<< "$github_raw"
fi

# merge local and GitHub repos in the format: repo_name\t[skip_reason]\n
all_repo_data="$local_repo_data"
while IFS=$'\t' read -r repo reason; do
    if ! grep -q "^$repo"$'\t' <<< "$local_repo_data"; then
        all_repo_data+="${repo}"$'\t'"${reason}"$'\n'
    fi
done <<< "$github_repo_data"

# calculate column width
REPO_COL_WIDTH=$(
    printf '%s\n' "$all_repo_data" |
    awk -F'\t' '{print length($1)}' |
    sort -nr |
    head -n1
)
REPO_COL_WIDTH=$((REPO_COL_WIDTH + 2))

# print header
if [ $CLONE = true ]; then
    echo -e "\e[1mSyncing local and GitHub repositories\e[0m"
else
    echo -e "\e[1mSyncing local repositories\e[0m"
fi

# loop through all repositories and sync
while IFS=$'\t' read -r repo skip_reason; do
    if [ -z "$repo" ]; then
        continue  # skip empty lines
    elif [ -d "$repo/.git" ]; then
        pull_repo "$repo"
    elif [ "$INCLUDE_SKIPPED" = false ] && [ -n "$skip_reason" ]; then
        skip_message "$repo" "$skip_reason"
    else
        clone_repo "$repo" "$skip_reason"
    fi
done <<< "$all_repo_data"

echo -e "\e[1mDone\e[0m"
