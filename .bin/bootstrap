#!/usr/bin/env bash

set -euo pipefail

REPO_URL_HTTPS="https://github.com/tk755/dotfiles.git"
DOTFILES_DIR="$HOME/.dotfiles"
BACKUP_DIR="$HOME/.bootstrap-backup"

# paths to exclude in headless install
HEADLESS_EXCLUDES=(
    ".config/i3"
    ".config/gtk-3.0"
    ".fonts"
    ".icons"
    ".themes"
    ".Xresources"
)

# default flags
HEADLESS=false
FORCE=false

# global variables
PROCESS_ICON="\e[36m⮞\e[0m"
FINISH_ICON="\e[32m✓\e[0m"

print_help() {
    cat <<EOF
Usage: bootstrap [OPTIONS]

Options:
    --headless      Exclude GUI-related dotfiles (for servers or WSL)
    --force         Overwrite local conflicts (destructive)
    --help          Show this help message

Exclude patterns (--headless):
    ${HEADLESS_EXCLUDES[*]}

Description:
    Installs the latest version of $REPO_URL_HTTPS.
      - Clones bare repo with sparse checkout into $DOTFILES_DIR.
      - Deletes the previous repo installation if it exists.

    By default, any conflicting (non-image) local files are preserved.
      - Use --force to overwrite local conflicts (destructive).
    
    All files in the repository are included by default.
      - Use --headless to exclude GUI-related files via sparse checkout.
EOF
}

parse_args() {
    for arg in "$@"; do
        case "$arg" in
            --headless) HEADLESS=true               ;;
            --force)    FORCE=true                  ;;
            --help)     print_help && exit 0        ;;
            *) echo "Invalid arg: $arg" && exit 1   ;;
        esac
    done
}

print_bold() {
    printf "\e[1m%s\e[0m\n" "$1"
}

# dotfiles git wrapper function
dotfiles() {
    git --git-dir="$DOTFILES_DIR" --work-tree="$HOME" "$@"
}

backup_local_changes() {
    echo -e " $PROCESS_ICON Backing up local changes"

    if [ -d "$BACKUP_DIR" ]; then
        rm -rf "$BACKUP_DIR"
    fi

    # iterate through all file paths tracked in HEAD
    while IFS= read -r file; do
        local full_path="$HOME/$file"

        # skip if not a regular file
        if [ ! -f "$full_path" ]; then
            continue
        fi

        # skip if image extension
        case "${file##*.}" in
            png|jpg|jpeg|gif|bmp|svg|ico|tiff|webp) continue ;;
        esac

        # save local files that differ with HEAD version
        if ! diff -q "$full_path" <(dotfiles show HEAD:"$file") > /dev/null 2>&1; then
            local backup_path="$BACKUP_DIR/$file"
            mkdir -p "$(dirname "$backup_path")"
            cp "$full_path" "$backup_path"
        fi
    done < <(dotfiles ls-tree -r --name-only HEAD)
}

restore_local_changes() {
    if [ "$FORCE" = true ] || [ ! -d "$BACKUP_DIR" ]; then
        return
    fi

    echo -e " $PROCESS_ICON Restoring local changes"

    # restore files from backup directory
    find "$BACKUP_DIR" -type f | while IFS= read -r backup_file; do
        rel_path="${backup_file#$BACKUP_DIR/}"
        dest_path="$HOME/$rel_path"
        mkdir -p "$(dirname "$dest_path")"
        cp "$backup_file" "$dest_path"
    done
}

print_local_changes() {
    if [ ! -d "$BACKUP_DIR" ]; then
        return
    fi

    echo
    if [ $FORCE = true ]; then
        echo "Files overwritten during clone:"
        local color="\e[31m"
    else
        echo "Files preserved during clone (overwrite with --force):"
        local color="\e[33m"
    fi

    local reset_color="\e[0m"
    while IFS= read -r file; do
        path="${file#$BACKUP_DIR/}"
        printf " ${color}%s${reset_color} %s\n" "M" "$path"
    done < <(find "$BACKUP_DIR" -type f | sort)
}

clone_repo() {
    echo -e " $PROCESS_ICON Cloning repo from $REPO_URL_HTTPS"

    # clone via HTTPS to avoid SSH setup issues
    git clone --bare "$REPO_URL_HTTPS" "$DOTFILES_DIR" &> /dev/null

    # change url to SSH for future pushes
    REPO_URL_SSH="git@github.com:${REPO_URL_HTTPS#https://github.com/}"
    git --git-dir="$DOTFILES_DIR" remote set-url origin "$REPO_URL_SSH"

    # configure git settings
    dotfiles config branch.main.remote origin
    dotfiles config branch.main.merge refs/heads/main
    dotfiles config --local status.showUntrackedFiles no
    dotfiles config core.sparseCheckout true
}

sparse_checkout() {
    echo -e " $PROCESS_ICON Checking out files to $HOME"

    # create sparse checkout file
    local sparse_file="$DOTFILES_DIR/info/sparse-checkout"
    mkdir -p "$(dirname "$sparse_file")"

    # update sparse checkout file
    if [ "$HEADLESS" = true ]; then
        echo "/*" > "$sparse_file"
        for path in "${HEADLESS_EXCLUDES[@]}"; do
            echo "!/$path" >> "$sparse_file"
        done
    else
        echo "/*" > "$sparse_file"
    fi

    # checkout (overwrites local files)
    dotfiles checkout --quiet 2> /dev/null
}

main() {
    parse_args "$@"

    print_bold "Setting up repo in $DOTFILES_DIR"
    if [ -d "$DOTFILES_DIR" ]; then
        backup_local_changes
        rm -rf "$DOTFILES_DIR"
        clone_repo
    else
        clone_repo
        backup_local_changes
    fi

    sparse_checkout
    restore_local_changes
    print_local_changes

    echo
    print_bold "Bootstrap complete"
    status_msg=$(dotfiles status | grep -oP '(?<=sparse checkout with ).*?(?=\.$)')
    echo -e " $FINISH_ICON $status_msg"
}

main "$@"
