#!/usr/bin/env bash
# Defines bash prompt

# returns system date in nanoseconds
function timestamp {
    date +%s%N
}

# sets $time_start if not set
function timer_start {
    time_start=${time_start:-$(timestamp)}
}

# returns formatted prompt timer segment
function timer_stop {
    # delta microseconds
    local delta_us=$(( ($(timestamp) - $time_start) / (1000) ))

    # extract time units
    local h=$(( (delta_us / (1000 * 1000 * 60 * 60))        ))
    local m=$(( (delta_us / (1000 * 1000 * 60)     ) % 60   ))
    local s=$(( (delta_us / (1000 * 1000)          ) % 60   ))
    local ms=$(( delta_us /  1000                    % 1000 ))
    local us=$(( delta_us                            % 1000))

    local tc    # timer color
    local ts    # timer string

    if (( h > 0 )); then
        tc=${RED}
        ts="${h}:$(printf '%02d' ${m}) h"
    elif (( m > 0 )); then
        tc=${YELLOW}
        ts="${m}:$(printf '%02d' ${s}) m"
    elif (( s > 0 )); then
        tc=${BLUE}
        ts="${s}.$(printf '%01d' $(( ${ms} / 100 ))) s"
    elif (( ms >= 100 )); then
        tc=${CYAN}
        ts="${ms} ms"
    elif (( ms > 0 )); then
        tc=${GREEN}
        ts="${ms}.$(printf '%01d' $(( ${us} / 100 ))) ms"
    else
        tc=${MAGENTA}
        ts="${us} Âµs"
    fi

    echo "${tc}${ts}${DEFAULT}"
}

# sets $PS1 and unsets $time_start
function set_prompt {
    local timer=$(timer_stop)
    local exit_code=$?

    PS1="\u@\h \w ${timer}\n$ "

    # must be the last command executed
    unset time_start
}

# DEBUG trap is executed just before a command
trap timer_start DEBUG

# PROMPT_COMMAND is executed just before Bash prints the primary prompt
PROMPT_COMMAND=set_prompt

# color definitions
: "${RED:=\[$(tput setaf 1)\]}" 
: "${GREEN:=\[$(tput setaf 2)\]}" 
: "${YELLOW:=\[$(tput setaf 3)\]}" 
: "${BLUE:=\[$(tput setaf 4)\]}" 
: "${MAGENTA:=\[$(tput setaf 5)\]}" 
: "${CYAN:=\[$(tput setaf 6)\]}" 
: "${DEFAULT:=\[$(tput sgr0)\]}"